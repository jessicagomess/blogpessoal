package com.generation.blogpessoal.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.generation.blogpessoal.model.Postagem;
import com.generation.blogpessoal.repository.PostagemRepository;
import com.generation.blogpessoal.repository.TemaRepository;

import jakarta.validation.Valid;

/* Camada respons√°vel por responder todas Requisi√ß√µes (HTTP Request), que for enviada de fora da aplica√ß√£o para o Recurso Postagem
 * Nessa classe, implementamos os m√©todos de CRUD (Create, Read, Update, Delete) utilizando os m√©todos da interface JpaRepository,
 * al√©m de m√©todos personalizados para consultas, que s√£o definidos na interface PostagemRepository.
 */

/* A anota√ß√£o @RestController define a classe como controladora REST, respons√°vel por processar requisi√ß√µes HTTP.
 * Ela lida com:- URL (endpoint), verbo HTTP (m√©todo) e, opcionalmente, corpo da requisi√ß√£o (dados para persistir).
 * Ap√≥s processar, retorna um c√≥digo de status HTTP e o resultado (dados) no corpo da resposta.
 */
@RestController

/* A anota√ß√£o @RequestMapping define a URL base (ex: /postagens) para os m√©todos da classe controladora.
 * Quando uma requisi√ß√£o √© feita para essa URL (ex: http://localhost:8080/postagens),
 * o Spring direciona a requisi√ß√£o para os m√©todos da classe PostagemController. 
 */
@RequestMapping("/postagens")

/* A anota√ß√£o @CrossOrigin indica que a controladora permitir√° o recebimento de requisi√ß√µes de fora do dom√≠nio localhost
 * √© essencial para que o front-end ou aplicativo mobile, tenha acesso aos M√©todos e Recursos da nossa aplica√ß√£o 
 * (O termo t√©cnico √© consumir a API). 
 */
@CrossOrigin(origins = "*", allowedHeaders = "*") //em produ√ß√£o, recomenda-se substituir o * (asterisco) pelo endere√ßo na nuvem (deploy) do Frontend ou da aplica√ß√£o mobile.

public class PostagemController {

	@Autowired // √â usado para "injetar" automaticamente depend√™ncias no Spring, ou seja, o Spring cria e gerencia objetos pra gente. Isso reduz a necessidade de criar manualmente objetos dentro das classes e facilita a manuten√ß√£o do c√≥digo.
	private PostagemRepository postagemRepository;
	
	//Para termos acesso aos M√©todos das Classes Tema e TemaController, precisamos inserir uma uma Inje√ß√£o de Depend√™ncia do Recurso Tema
	@Autowired
	private TemaRepository temaRepository;
	
	/* @GetMapping mapeia requisi√ß√µes HTTP GET para um endpoint espec√≠fico. 
	 * No caso, ele diz que o m√©todo getAll() ir√° responder a requisi√ß√µes GET enviadas para http://localhost:8080/postagens/.
	 */
	@GetMapping 
	public ResponseEntity<List<Postagem>> getAll(){
		/*O m√©todo getAll() retorna um ResponseEntity com status 200 (OK).
	     No corpo da resposta (body), √© retornada uma lista contendo todos os objetos da classe Postagem
	     */
		return ResponseEntity.ok(postagemRepository.findAll());
		/* O m√©todo findAll() da interface JpaRepository retorna todos os registros da tabela tb_postagens.
	    Mesmo se a lista estiver vazia, o status retornado ser√° sempre 200 (OK). 
	    */
	}
	
	/* @GetMapping("/{id}") mapeia as Requisi√ß√µes HTTP GET para um endpoint espec√≠fico.
	 * ele diz que o M√©todo getById( Long id ), responder√° a todas as requisi√ß√µes GET enviadar para http://localhost:8080/postagens/id, 
	 * onde id √© uma Vari√°vel de Caminho (Path Variable), que receber√° o id da Postagem que ser√° Consultada
	*/
	@GetMapping("/{id}")
	public ResponseEntity<Postagem> getById(@PathVariable Long id) { // @PathVariable Long id: Esta anota√ß√£o insere o valor enviado no endere√ßo do endpoint, na Vari√°vel de Caminho {id}, no par√¢metro do M√©todo getById( Long id ); 
			return postagemRepository.findById(id) // Retorna a execu√ß√£o do M√©todo findById(id), que √© um M√©todo padr√£o da Interface JpaRepository. O M√©todo retornar√° um Objeto da Classe Postagem persistido no Banco de dados Postagem, caso ele seja encontrado a partir do par√¢metro Long id.  
					.map(resposta -> ResponseEntity.ok(resposta)) //Se o Objeto da Classe Postagem for encontrado, o M√©todo map (Optional), mapeia no Objeto resposta o Objeto Postagem retornado pelo M√©todo findById(id), insere o Objeto mapeado no Corpo da Resposta do M√©todo ResponseEntity.ok(resp); e retorna o HTTP Status OKü°™200.
					.orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());
	}
	
	@GetMapping("/titulo/{titulo}")
	public ResponseEntity<List<Postagem>> getByTitulo(@PathVariable String titulo){
		return ResponseEntity.ok(postagemRepository.findAllByTituloContainingIgnoreCase(titulo));
			
	}
	
	// M√©todo post(Postagem postagem), persistir√° um novo Objeto da Classe Postagem no Banco de dados.
	/*@PostMapping 
	public ResponseEntity<Postagem> post(@Valid @RequestBody Postagem postagem){ //@RequestBody Postagem postagem: Esta anota√ß√£o recebe o Objeto do tipo Postagem, que foi enviado no Corpo da Requisi√ß√£o (Request Body), no formato JSON e insere no par√¢metro postagem do M√©todo post.
		// o M√©todo possui um par√¢metro, que √© um Objeto da Classe Postagem, chamado postagem.
		return ResponseEntity.status(HttpStatus.CREATED)
				.body(postagemRepository.save(postagem));
	}*/
	
	//M√âTODO POST ATUALIZADO
	@PostMapping
	public ResponseEntity<Postagem> post(@Valid @RequestBody Postagem postagem){
		if(temaRepository.existsById(postagem.getTema().getId()))
			return ResponseEntity.status(HttpStatus.CREATED)
					.body(postagemRepository.save(postagem));
		
		throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Tema n√£o existe!", null);
	}
	
	// atualiza um Objeto da Classe Postagem persistido no Banco de dados.
	/*@PutMapping
	public ResponseEntity<Postagem> put(@Valid @RequestBody Postagem postagem) {
		return postagemRepository.findById(postagem.getId())
				.map(resposta -> ResponseEntity.status(HttpStatus.OK)
						.body(postagemRepository.save(postagem)))
				.orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());
	}*/
	
	//M√âTODO POST ATUALIZADO
	@PutMapping
	public ResponseEntity<Postagem> put(@Valid @RequestBody Postagem postagem){
		if (postagemRepository.existsById(postagem.getId())) {
			
			if (temaRepository.existsById(postagem.getTema().getId()))
				return ResponseEntity.status(HttpStatus.OK)
						.body(postagemRepository.save(postagem));
			
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Tema n√£o existe!", null);
		}
		
		return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
	
	}
	//A anota√ß√£o @ResponseStatus indica que o M√©todo delete(Long id), ter√° um Status HTTP espec√≠fico quando a Requisi√ß√£o for bem sucedida
	@ResponseStatus(HttpStatus.NO_CONTENT)
	@DeleteMapping("/{id}")
	public void delete(@PathVariable Long id) { // O M√©todo delete(@PathVariable Long id) foi definido com o tipo void, porque ao deletar um Objeto da Classe Postagem do Banco de dados, ela deixa de existir, logo n√£o existe um Objeto para ser Retornado
		//@PathVariable Long id: Esta anota√ß√£o insere o valor enviado no endere√ßo do endpoint, na Vari√°vel de Caminho {id}, no par√¢metro do M√©todo delete( Long id 
		Optional<Postagem> postagem = postagemRepository.findById(id); {
			//Cria um Objeto Optional da Classe Postagem chamado postagem, que receber√° o resultado do M√©todo findById(id). Como o M√©todo pode retornar um Objeto Nulo, caso ele n√£o seja encontrado, utilizaremos um Objeto Optional para encapsular a resposta do M√©todo findById(id) e evitar o erro NullPointerException.
			
			if(postagem.isEmpty())
				throw new ResponseStatusException(HttpStatus.NOT_FOUND);
			
			//Caso contr√°rio, o M√©todo padr√£o da Interface JpaRepository deleteById(Long id) ser√° executado e o HTTP Status NO_CONTENT ü°™ 204, HTTP Status padr√£o do M√©todo, ser√° enviado na Resposta da Requisi√ß√£o, indicando que o Objeto foi Exclu√≠do.
			postagemRepository.deleteById(id);
		}
	}
	
}


